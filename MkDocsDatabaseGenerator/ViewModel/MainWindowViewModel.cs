using MkDocsDatabaseGenerator.Command;
using MkDocsDatabaseGenerator.Model;
using PlantUml.Net;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using Microsoft.WindowsAPICodePack.Dialogs;
using System.Windows.Input;
using Microsoft.Win32;
using System.Drawing;
using MaterialDesignThemes.Wpf;
using System.Collections.ObjectModel;

namespace MkDocsDatabaseGenerator.ViewModel
{
    public class MainWindowViewModel : BaseViewModel
    {
        private const int MaxDirectoryCreationTry = 3;
        private const string JavaJdkInstallationFolderEnvironnementVariable = "JAVA_HOME";
        private const string PlantUmlPolyLineParameter = "skinparam linetype polyline";
        private const string PlantUmlOrthoParameter = "skinparam linetype ortho";
        private const string TableAutoGeneratedFolderName = "Table";
        private const string PlantUmlBaseStyle = "!includeurl https://raw.githubusercontent.com/matthewjosephtaylor/plantuml-style/master/style.pu";
        private const string PlantUmlStart = "@startuml";
        private const string PlantUmlEnd = "@enduml";
        private const int PlantUmlMaxRenderingTimeMillisecond = 2 * 60 * 1000;
        private const int PlantUmlMaxRenderingTimeSecond = 2 * 60;

        private const string AutoGeneratedStartFileName = "AutoGenerated_";
        private const string CustomStartFileName = "Custom_";
        private const string OlderFolderName = "Older";
        private const string CustomFolderName = "Custom";

        private const string StartServerText = "Start MkDocs Server";
        private const string StopServerText = "Stop MkDocs Server";

        #region Properties
        #region Command
        #region Property : GenerateDocumentationCommand
        private ICommand generateDocumentationCommand;
        public ICommand GenerateDocumentationCommand
        {
            get { return generateDocumentationCommand; }
            set
            {
                generateDocumentationCommand = value;
                OnPropertyChanged(nameof(GenerateDocumentationCommand));
            }
        }
        #endregion
        #region Property : MergeGeneratedDocumentationCommand
        private ICommand mergeGeneratedDocumentationCommand;
        public ICommand MergeGeneratedDocumentationCommand
        {
            get { return mergeGeneratedDocumentationCommand; }
            set
            {
                mergeGeneratedDocumentationCommand = value;
                OnPropertyChanged(nameof(MergeGeneratedDocumentationCommand));
            }
        }
        #endregion
        #region Property : RegenerateYamlCommand
        private ICommand regenerateYamlCommand;
        public ICommand RegenerateYamlCommand
        {
            get { return this.regenerateYamlCommand; }
            set
            {
                this.regenerateYamlCommand = value;
                OnPropertyChanged(nameof(this.RegenerateYamlCommand));
            }
        }
        #endregion
        #region Property : StartStopServerCommand
        private ICommand startStopServerCommand;
        public ICommand StartStopServerCommand
        {
            get { return this.startStopServerCommand; }
            set
            {
                this.startStopServerCommand = value;
                OnPropertyChanged(nameof(this.StartStopServerCommand));
            }
        }
        #endregion
        #region Property : FolderPathSearchCommand
        private ICommand folderPathSearchCommand;
        public ICommand FolderPathSearchCommand
        {
            get { return this.folderPathSearchCommand; }
            set
            {
                this.folderPathSearchCommand = value;
                OnPropertyChanged(nameof(this.FolderPathSearchCommand));
            }
        }
        #endregion
        #region Property : PlantUmlPathSearchCommand
        private ICommand plantUmlPathSearchCommand;
        public ICommand PlantUmlPathSearchCommand
        {
            get { return this.plantUmlPathSearchCommand; }
            set
            {
                this.plantUmlPathSearchCommand = value;
                OnPropertyChanged(nameof(this.PlantUmlPathSearchCommand));
            }
        }
        #endregion
        #region Property : GraphvizDotPathSearchCommand
        private ICommand graphvizDotPathSearchCommand;
        public ICommand GraphvizDotPathSearchCommand
        {
            get { return this.graphvizDotPathSearchCommand; }
            set
            {
                this.graphvizDotPathSearchCommand = value;
                OnPropertyChanged(nameof(this.GraphvizDotPathSearchCommand));
            }
        }
        #endregion
        #region Property : JavaPathSearchCommand
        private ICommand javaPathSearchCommand;
        public ICommand JavaPathSearchCommand
        {
            get { return this.javaPathSearchCommand; }
            set
            {
                this.javaPathSearchCommand = value;
                OnPropertyChanged(nameof(this.JavaPathSearchCommand));
            }
        }
        #endregion


        #endregion

        private bool isGenerating = false;

        #region Property : Database
        private string database = Properties.Settings.Default.Database;// string.Empty;
        public string Database
        {
            get { return database; }
            set
            {
                database = value;
                if (!String.IsNullOrEmpty(database))
                {
                    Properties.Settings.Default.Database = database;
                    Properties.Settings.Default.Save();
                }
                OnPropertyChanged(nameof(Database));
            }
        }
        #endregion
        #region Property : FolderPath
        private string folderPath = Properties.Settings.Default.FolderPath;// string.Empty;
        public string FolderPath
        {
            get { return folderPath; }
            set
            {
                folderPath = value;
                if (!String.IsNullOrEmpty(folderPath))
                {
                    Properties.Settings.Default.FolderPath = folderPath;
                    Properties.Settings.Default.Save();
                }
                OnPropertyChanged(nameof(FolderPath));
            }
        }
        #endregion
        #region Property : Server
        private string server = Properties.Settings.Default.Server;// string.Empty;
        public string Server
        {
            get { return server; }
            set
            {
                server = value;
                if (!String.IsNullOrEmpty(server))
                {
                    Properties.Settings.Default.Server = server;
                    Properties.Settings.Default.Save();
                }
                OnPropertyChanged(nameof(Server));
            }
        }
        #endregion
        #region Property : PlantUmlPath
        private string plantUmlPath = Properties.Settings.Default.PlantUmlPath;
        public string PlantUmlPath
        {
            get { return this.plantUmlPath; }
            set
            {
                this.plantUmlPath = value;
                if (!String.IsNullOrEmpty(plantUmlPath))
                {
                    Properties.Settings.Default.PlantUmlPath = plantUmlPath;
                    Properties.Settings.Default.Save();
                }
                OnPropertyChanged(nameof(this.PlantUmlPath));
            }
        }
        #endregion
        #region Property : GraphvizDotPath
        private string graphvizDotPath = Properties.Settings.Default.GraphvizDotPath;
        public string GraphvizDotPath
        {
            get { return this.graphvizDotPath; }
            set
            {
                this.graphvizDotPath = value;
                if (!String.IsNullOrEmpty(graphvizDotPath))
                {
                    Properties.Settings.Default.GraphvizDotPath = graphvizDotPath;
                    Properties.Settings.Default.Save();
                }
                OnPropertyChanged(nameof(this.GraphvizDotPath));
            }
        }

        #region Property : OperationQuantity
        private int operationQuantity;
        public int OperationQuantity
        {
            get { return this.operationQuantity; }
            set
            {
                this.operationQuantity = value;
                OnPropertyChanged(nameof(this.OperationQuantity));
            }
        }
        #endregion
        #region Property : NbOperation
        private int nbOperation;
        public int NbOperation
        {
            get { return this.nbOperation; }
            set
            {
                this.nbOperation = value;
                OnPropertyChanged(nameof(this.NbOperation));
            }
        }
        #endregion
        #region Property : Operation
        private string operation = "Doing nothing now";
        public string Operation
        {
            get { return this.operation; }
            set
            {
                this.operation = value;
                OnPropertyChanged(nameof(this.Operation));
            }
        }
        #endregion
        #region Property : SubOperation
        private string subOperation = String.Empty;
        public string SubOperation
        {
            get { return this.subOperation; }
            set
            {
                this.subOperation = value;
                OnPropertyChanged(nameof(this.SubOperation));
            }
        }
        #endregion
        #region Property : NewVersion
        private bool newVersion = true;
        public bool NewVersion
        {
            get { return this.newVersion; }
            set
            {
                this.newVersion = value;
                OnPropertyChanged(nameof(this.NewVersion));
            }
        }
        #endregion

        #region Property : StartStopServerButton
        private string startStopServerButton = StartServerText;
        public string StartStopServerButton
        {
            get { return this.startStopServerButton; }
            set
            {
                this.startStopServerButton = value;
                OnPropertyChanged(nameof(this.StartStopServerButton));
            }
        }

        #region Property : IsServerStart
        private bool isServerStart;
        public bool IsServerStart
        {
            get { return this.isServerStart; }
            set
            {
                this.isServerStart = value;
                if (IsServerStart)
                    StartStopServerButton = StartServerText;
                else
                    StartStopServerButton = StopServerText;
                OnPropertyChanged(nameof(this.IsServerStart));
            }
        }
        #endregion
        public bool IsServerStarting { get; set; } = false;

        public Process MkDocsServerProcess { get; set; }
        #endregion


        #endregion
        #region Property : JavaPath
        private string javaPath = Properties.Settings.Default.JavaPath;
        public string JavaPath
        {
            get { return this.javaPath; }
            set
            {
                this.javaPath = value;
                if (!String.IsNullOrEmpty(this.JavaPath))
                {
                    Properties.Settings.Default.JavaPath = this.JavaPath;
                    Properties.Settings.Default.Save();
                }
                OnPropertyChanged(nameof(this.JavaPath));
            }
        }
        #endregion
        #region Property : SelectedColor
        private ColorViewModel selectedColor;
        public ColorViewModel SelectedColor
        {
            get { return this.selectedColor; }
            set
            {
                this.selectedColor = value;
                OnPropertyChanged(nameof(this.SelectedColor));
            }
        }
        #endregion
        #region Property : Colors
        private ObservableCollection<ColorViewModel> colors =
            new ObservableCollection<ColorViewModel>(
                new List<ColorViewModel>() {
                    new ColorViewModel(){ Color = new MaterialDesignColors.ColorPair().Color}
                });
        public ObservableCollection<ColorViewModel> Colors
        {
            get { return this.colors; }
            set
            {
                this.colors = value;
                OnPropertyChanged(nameof(this.Colors));
            }
        }
        #endregion
        #region Property : MakeGraph
        private bool makeGraph = true;
        public bool MakeGraph
        {
            get { return this.makeGraph; }
            set
            {
                this.makeGraph = value;
                OnPropertyChanged(nameof(this.MakeGraph));
            }
        }
        #endregion



        #endregion

        public MainWindowViewModel()
        {
            GenerateDocumentationCommand = new RelayCommand(o => GenerateDocumentation(o));
            MergeGeneratedDocumentationCommand = new RelayCommand(o => MergeGeneratedDocumentation(o));
            RegenerateYamlCommand = new RelayCommand(o => RegenerateYaml(o));
            StartStopServerCommand = new RelayCommand(o => StartStopServer(o));
            FolderPathSearchCommand = new RelayCommand(o => FolderPathSearch(o));
            PlantUmlPathSearchCommand = new RelayCommand(o => PlantUmlPathSearch(o));
            GraphvizDotPathSearchCommand = new RelayCommand(o => GraphvizDotPathSearch(o));
            JavaPathSearchCommand = new RelayCommand(o => JavaPathSearch(o));
        }

        private void GenerateForAllServer(object o)
        {

        }

        private void CreateNewYaml(TextInfo textInfo, string ymlFullPath)
        {
            DirectoryInfo info = new DirectoryInfo(Path.Combine(Path.GetDirectoryName(ymlFullPath), "docs"));
            if (info != null)
            {
                List<String> lines = new List<string>();
                lines.Add("site_name: " + textInfo.ToTitleCase(Database.Replace('_', ' ')));
                lines.Add("");
                lines.Add("site_url: \"\"");
                lines.Add("");
                lines.Add("use_directory_urls: false");
                lines.Add("");
                lines.Add("nav:");
                buildNavigationFromDirectory(lines, textInfo, info, 1, Path.Combine(Path.GetDirectoryName(ymlFullPath), "docs"));
                lines.Add("");
                lines.Add("");
                lines.Add("");
                lines.Add("");
                lines.Add("theme: ");
                lines.Add("  name: material");
                lines.Add("  custom_dir: custom_theme/");
                lines.Add("  features:");
                lines.Add("    - navigation.tabs");
                lines.Add("  icon:");
                lines.Add("    admonition:");
                lines.Add("      note: octicons/tag-16");
                lines.Add("      abstract: octicons/checklist-16");
                lines.Add("      info: octicons/info-16");
                lines.Add("      tip: octicons/squirrel-16");
                lines.Add("      success: octicons/check-16");
                lines.Add("      question: octicons/question-16");
                lines.Add("      warning: octicons/alert-16");
                lines.Add("      failure: octicons/x-circle-16");
                lines.Add("      danger: octicons/zap-16");
                lines.Add("      bug: octicons/bug-16");
                lines.Add("      example: octicons/beaker-16");
                lines.Add("      quote: octicons/quote-16");
                lines.Add("  highlightjs: true");
                lines.Add("  hljs_style: sql");
                lines.Add("  hljs_languages:");
                lines.Add("    - sql");
                lines.Add("    - c#");
                lines.Add("");
                lines.Add("markdown_extensions:");
                lines.Add("  - attr_list");
                lines.Add("  - md_in_html");
                lines.Add("  - tables");
                lines.Add("  - attr_list");
                lines.Add("  - pymdownx.caret");
                lines.Add("  - pymdownx.emoji:");
                lines.Add("      emoji_index: !!python/name:materialx.emoji.twemoji");
                lines.Add("      emoji_generator: !!python/name:materialx.emoji.to_svg");
                lines.Add("");
                lines.Add("plugins:");
                lines.Add("  - mkdocstrings");
                lines.Add("  - print-site");

                lines.WriteFile(ymlFullPath);
            }


        }

        private void CreateIntroMdFile(string folderPath)
        {
            List<String> lines = new List<string>();
            lines.Add("&copy;Copyright Faymonville");
            lines.Add("");
            lines.Add("# Introduction");

            lines.WriteFile(Path.Combine(folderPath, "intro.md"));
        }
        private void CreateIndexMdFile(string folderPath, string name)
        {
            if (string.IsNullOrEmpty(name))
            {
                name = new DirectoryInfo(folderPath)?.Parent?.Name ?? "Unknown";
            }
            List<String> lines = new List<string>();
            lines.Add("# " + name);
            lines.Add("");
            lines.Add("This document describes the needs and development of the project \"" + name + "\".");
            lines.Add("");
            lines.Add("## Database locations");
            lines.Add("");
            var last2 = server.TakeLast(2);
            if (last2.All(c => c == '1'))
            {
                lines.Add("Production : ");
                lines.Add("");
                lines.Add("Test : `" + server + "." + database + "`");
                lines.Add("");
                lines.Add("Development: `" + server + "." + database + "`");
                lines.Add("");
            }
            else
            {
                lines.Add("Production : `" + server + "." + database + "`");
                lines.Add("");
                lines.Add("Test : ");
                lines.Add("");
                lines.Add("Development: ");
                lines.Add("");
            }
            lines.Add("## Historique");
            lines.Add("");
            lines.Add("| Version | Date | Comment |");
            lines.Add("| --- | --- | --- | ");
            lines.Add("| 0 | " + DateTime.Now.ToShortDateString() + " | First Version. | ");

            lines.WriteFile(Path.Combine(folderPath, "index.md"));
        }

        #region GenerateDocumentation
        public void GenerateDocumentation(object o)
        {
            if (!isGenerating)
            {
                isGenerating = true;
                Task.Run(async () =>
                {
                    CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();
                    CancellationToken cancellationToken = cancellationTokenSource.Token;

                    try
                    {
                        if (String.IsNullOrEmpty(Database) || string.IsNullOrEmpty(Server) || string.IsNullOrEmpty(FolderPath))
                        {
                            MessageBox.Show("All fields have to be filled");
                        }
                        else
                        {
                            App.Current.Dispatcher.Invoke(() => Operation = "Create directories.");
                            CreateDirectory(Path.Combine(folderPath, "custom_theme"));
                            CreateDirectory(Path.Combine(folderPath, "custom_theme", "img"));
                            CreateDirectory(Path.Combine(folderPath, "docs"));
                            CreateDirectory(Path.Combine(folderPath, "docs", "Database"));


                            if (!File.Exists(Path.Combine(folderPath, "docs", "intro.md")))
                            {
                                CreateIntroMdFile(Path.Combine(folderPath, "docs"));
                            }
                            if (!File.Exists(Path.Combine(folderPath, "docs", "index.md")))
                            {
                                CreateIndexMdFile(Path.Combine(folderPath, "docs"), new DirectoryInfo(folderPath).Name);
                            }

                            App.Current.Dispatcher.Invoke(() => Operation = "Load database informations.");
                            DatabaseGenerator generator = new DatabaseGenerator(Server, Database);
                            var tables = generator.Tables;

                            App.Current.Dispatcher.Invoke(() => Operation = "Copy current version in older folder.");

                            TextInfo textInfo = CultureInfo.CurrentCulture.TextInfo;
                            if (NewVersion)
                            {
                                CreateDirectory(Path.Combine(folderPath, "docs", "Database"));
                                DirectoryInfo databaseDirectory = new DirectoryInfo(Path.Combine(folderPath, "docs", "Database"));
                                DirectoryInfo[] directories = databaseDirectory.GetDirectories();
                                int max = 0;
                                if (databaseDirectory.GetDirectories().Any(d => d.Name == OlderFolderName))
                                {
                                    databaseDirectory = databaseDirectory.GetDirectories("Older", SearchOption.AllDirectories).OrderBy(d => d.FullName.Length).FirstOrDefault();
                                    Regex regex = new Regex(@"^V\d$");
                                    string vMax = databaseDirectory.GetDirectories("V*", SearchOption.TopDirectoryOnly).Where(f => regex.IsMatch(f.Name)).OrderByDescending(f => f.Name.Substring(1)).FirstOrDefault()?.Name;
                                    Int32.TryParse(vMax.Substring(1).Split('-', StringSplitOptions.RemoveEmptyEntries).FirstOrDefault(), out max);
                                }
                                CreateDirectory(Path.Combine(folderPath, "docs", "Database", OlderFolderName, "V" + (max + 1)));
                                foreach (var directory in directories.Where(d => d.Name != OlderFolderName))
                                {
                                    CreateDirectory(Path.Combine(folderPath, "docs", "Database", OlderFolderName, "V" + (max + 1), directory.Name));
                                    directory.FullName.CopyFilesRecursively(Path.Combine(folderPath, "docs", "Database", OlderFolderName, "V" + (max + 1), directory.Name));
                                }
                                foreach (FileInfo newPath in new DirectoryInfo(Path.Combine(folderPath, "docs", "Database")).GetFiles("*.*", SearchOption.TopDirectoryOnly))
                                {
                                    File.Copy(newPath.FullName, newPath.FullName.Replace(Path.Combine(folderPath, "docs", "Database"), Path.Combine(folderPath, "docs", "Database", OlderFolderName, "V" + (max + 1))), true);
                                }
                                MakeNewVersionNavigation(textInfo, folderPath, max + 1);
                            }
                            else if (!File.Exists(Path.Combine(folderPath, "mkdocs.yml")))
                            {
                                CreateNewYaml(textInfo, Path.Combine(folderPath, "mkdocs.yml"));
                            }

                            App.Current.Dispatcher.Invoke(() => Operation = "Generate Custom MarkDown files.");
                            GenerateCustomMarkdowns(textInfo, tables, Path.Combine(folderPath, "docs", "Database", CustomFolderName));

                            App.Current.Dispatcher.Invoke(() => OperationQuantity = tables.Count() * 4 + 5);
                            App.Current.Dispatcher.Invoke(() => NbOperation = 0);

                            string global = String.Empty;

                            if (MakeGraph)
                            {
                                App.Current.Dispatcher.Invoke(() => Operation = "Generate table schemas.");
                                global = generateTableDiagrams(tables, Path.Combine(folderPath, "docs", "Database"));
                            }

                            App.Current.Dispatcher.Invoke(() => SubOperation = "Generate Markdown Files");
                            generateTableMarkdowns(tables: tables, folderPath: Path.Combine(folderPath, "docs", "Database"), makeGraph: MakeGraph, cancellationToken: cancellationToken);

                            if (MakeGraph)
                            {
                                App.Current.Dispatcher.Invoke(() => Operation = "Render table schemas.");
                                await RenderDiagram(tables, Path.Combine(folderPath, "docs", "Database"), global, cancellationToken);
                            }

                            //App.Current.Dispatcher.Invoke(() => SubOperation = "Update Navigation");
                        }
                    }
                    catch (Exception e)
                    {
                        MessageBox.Show(e.ToString());
                    }
                    App.Current.Dispatcher.Invoke(() => Operation = String.Empty);
                    App.Current.Dispatcher.Invoke(() => SubOperation = String.Empty);
                    App.Current.Dispatcher.Invoke(() => OperationQuantity = 0);
                    App.Current.Dispatcher.Invoke(() => NbOperation = 0);
                    App.Current.Dispatcher.Invoke(() => isGenerating = false);
                });
            }
        }

        private void GenerateCustomMarkdowns(TextInfo textInfo, ICollection<Table> tables, string folderPath)
        {
            CreateDirectory(folderPath);
            foreach (Table table in tables)
            {
                if (!File.Exists(Path.Combine(folderPath, table.MdFile)))
                {
                    List<String> lines = new List<string>();
                    lines.Add("#" + textInfo.ToTitleCase(table.Name));
                    lines.Add("");
                    lines.Add("");
                    lines.Add("");
                    File.WriteAllLines(Path.Combine(folderPath, CustomStartFileName + table.MdFile), lines);
                }
            }
        }

        private void MakeNewVersionNavigation(TextInfo textInfo, string folderPath, int newVersion)
        {
            if (!File.Exists(Path.Combine(folderPath, "mkdocs.yml")))
            {
                CreateNewYaml(textInfo, Path.Combine(folderPath, "mkdocs.yml"));
            }

            CreateNewVersionInIndexFile(Path.Combine(folderPath, "docs"), "V" + newVersion, "Version auto-generated.");

            string[] lines = File.ReadAllLines(Path.Combine(folderPath, "mkdocs.yml"));

            List<String> updateNavigation = new List<String>();
            int iLine;
            for (iLine = 0; iLine < lines.Length && lines[iLine] != "nav:"; iLine++)
            {
                updateNavigation.Add(lines[iLine]);
            }

            if (iLine < lines.Length)
            {
                updateNavigation.Add(lines[iLine]);
                int spacingDatabase = lines[iLine].CountFirstSpaces();
                while (iLine < lines.Length && !lines[iLine].Contains("- Table :"))
                {
                    updateNavigation.Add(lines[iLine]);
                    iLine++;
                }
                if (iLine < lines.Length)
                {
                    int spacingDatabaseTable = lines[iLine].CountFirstSpaces();
                    if (spacingDatabase < spacingDatabaseTable)
                    {
                        int iEndNavigation = iLine;
                        while (iEndNavigation < lines.Length && lines[iEndNavigation].StartsWith(' '))
                        {
                            iEndNavigation++;
                        }

                        String[] databaseNavigation = lines.Split(iLine + 1, iEndNavigation, out string[] beforeNavigation, out string[] afterNavigation);


                        int iOlder = iLine;
                        while (iOlder > 0 && (lines[iOlder].CountFirstSpaces() != spacingDatabaseTable || !lines[iOlder].Contains("- Older :")))
                        {
                            iOlder--;
                        }
                        if (iOlder == 0)
                        {
                            StringBuilder builder = new StringBuilder();
                            for (int iTab = 0; iTab < spacingDatabaseTable; iTab++)
                                builder.Append(' ');
                            builder.Append("- Older :");
                            updateNavigation.Add(builder.ToString());
                            builder.Clear();
                            for (int iTab = 0; iTab < spacingDatabaseTable + 1; iTab++)
                                builder.Append(' ');
                            builder.Append("  ");
                            builder.Append("- V1 :");
                            updateNavigation.Add(builder.ToString());
                            foreach (string nav in databaseNavigation)
                            {
                                updateNavigation.Add("    " + nav.Replace(@"Database\Table_autoGenerated", @"Database\Table_autoGenerated\Older\V1"));
                            }
                        }
                        else
                        {
                            int olderSpacing = lines[iOlder].CountFirstSpaces();
                            while (iOlder < lines.Length && lines[iOlder].CountFirstSpaces() != olderSpacing)
                            {
                                iOlder++;
                            }
                            iLine = iOlder;

                            StringBuilder builder = new StringBuilder();
                            for (int iTab = 0; iTab < spacingDatabaseTable; iTab++)
                                builder.Append(' ');
                            builder.Append("  ");
                            builder.AppendLine("- V" + newVersion + " :");
                            updateNavigation.Add(builder.ToString());
                            foreach (string nav in databaseNavigation)
                            {
                                updateNavigation.Add("    " + nav.Replace(@"Database\Table_autoGenerated", @"Database\Table_autoGenerated\Older\V" + newVersion));
                            }

                        }

                        while (iLine < lines.Length)
                        {
                            updateNavigation.Add(lines[iLine]);
                            iLine++;
                        }

                        File.WriteAllLines(Path.Combine(folderPath, "mkdocs.yml"), updateNavigation);
                    }
                }
            }

        }

        private void CreateNewVersionInIndexFile(string folderPath, string version, string comment = "")
        {
            if (Directory.Exists(folderPath))
            {
                DirectoryInfo directory = new DirectoryInfo(folderPath);
                if (directory.GetFiles("index.md", SearchOption.TopDirectoryOnly).FirstOrDefault() is FileInfo index)
                {
                    String[] lines = File.ReadAllLines(index.FullName);
                    string escape = Regex.Escape("|");
                    Regex regex = new Regex(escape + "*Version*" + escape + "*Date*" + escape + "*Comment*" + escape);
                    int iLine = 0;
                    while (iLine < lines.Length && !regex.IsMatch(lines[iLine]))
                    {
                        iLine++;
                    }
                    while (iLine < lines.Length && lines[iLine].StartsWith("|"))
                    {
                        iLine++;
                    }

                    List<String> indexNew = new List<string>();
                    indexNew.AddRange(lines.Split(iLine, out string[] last));
                    indexNew.Add("| " + version + " | " + DateTime.Now.ToShortDateString() + " | " + comment + " |");
                    indexNew.AddRange(last);

                    indexNew.WriteFile(index.FullName);

                    //using (FileStream stream = index.Open(FileMode.Create, FileAccess.Write))
                    //{
                    //    using (TextWriter writer = new StreamWriter(stream))
                    //    {
                    //        foreach (String line in indexNew)
                    //            writer.WriteLine(line);
                    //    }
                    //}
                }
            }
        }

        private void buildNavigationFromDirectory(List<String> lines, TextInfo textInfo, DirectoryInfo info, int level, string folderOrigin)
        {
            if ((info.GetFiles("*.md", SearchOption.AllDirectories)?.Length ?? 0) > 0 && !info.Name.Contains(CustomFolderName))
            {
                if (info.Name == OlderFolderName)
                {
                    foreach (DirectoryInfo directory in info.GetDirectories("*", SearchOption.TopDirectoryOnly))
                    {
                        StringBuilder builder = new StringBuilder();
                        for (int i = 0; i < level; i++)
                        {
                            builder.Append("  ");
                        }
                        builder.Append("- " + textInfo.ToTitleCase(Path.GetFileNameWithoutExtension(directory.Name)) + " : ");
                        lines.Add(builder.ToString());
                        buildNavigationFromDirectory(lines, textInfo, directory, level + 1, folderOrigin);
                    }
                }
                else if ((info.GetFiles("*.md", SearchOption.TopDirectoryOnly)?.Length ?? 0) == 0 && (info.GetDirectories("*", SearchOption.TopDirectoryOnly)?.Length ?? 0) > 0)
                {
                    foreach (DirectoryInfo directory in info.GetDirectories("*", SearchOption.TopDirectoryOnly))
                    {
                        buildNavigationFromDirectory(lines, textInfo, directory, level, folderOrigin);
                    }
                }
                else
                {
                    foreach (FileInfo file in info.GetFiles("*.md", SearchOption.TopDirectoryOnly).Where(f => !f.Name.StartsWith(CustomStartFileName) && !f.Name.StartsWith(AutoGeneratedStartFileName)))
                    {
                        StringBuilder builder = new StringBuilder();
                        for (int i = 0; i < level; i++)
                        {
                            builder.Append("  ");
                        }
                        builder.Append("- " + textInfo.ToTitleCase(Path.GetFileNameWithoutExtension(file.Name)) + " : " + file.FullName.Replace(folderOrigin + "\\", ""));
                        lines.Add(builder.ToString());

                    }
                    foreach (DirectoryInfo directory in info.GetDirectories("*", SearchOption.TopDirectoryOnly).Where(d => !d.Name.Contains(CustomFolderName)))
                    {
                        StringBuilder builder = new StringBuilder();
                        for (int i = 0; i < level; i++)
                        {
                            builder.Append("  ");
                        }
                        builder.Append("- " + textInfo.ToTitleCase(Path.GetFileNameWithoutExtension(directory.Name)) + " : ");
                        lines.Add(builder.ToString());
                        buildNavigationFromDirectory(lines, textInfo, directory, level + 1, folderOrigin);
                    }
                }
            }
        }

        private void generateTableMarkdowns(ICollection<Table> tables, string folderPath, bool makeGraph = false, CancellationToken? cancellationToken = null)
        {
            cancellationToken?.ThrowIfCancellationRequested();
            CreateDirectory(Path.Combine(folderPath, TableAutoGeneratedFolderName));
            if (makeGraph)
            {
                StringBuilder globalBuilder = new StringBuilder();
                globalBuilder.AppendLine("# Database");
                globalBuilder.AppendLine("");
                globalBuilder.AppendLine("# Global Database Schema");
                globalBuilder.AppendLine("");
                globalBuilder.AppendLine("![Global]([full_database.svg](full_database.svg))");
                globalBuilder.WriteFile(Path.Combine(folderPath, "general.md"));
            }

            foreach (Table table in tables)
            {
                // Table
                CreateDirectory(Path.Combine(folderPath, TableAutoGeneratedFolderName, table.TableName));
                cancellationToken?.ThrowIfCancellationRequested();

                StringBuilder builder = new StringBuilder();
                builder.AppendLine("\n## Information sur la table\n");
                builder.AppendLine("| Table Name          | Column Name      | Column Type      | Column Length | Column Precision | Remarks |");
                builder.AppendLine("| ------------------- | ---------------- | ---------------- | ------------- | ---------------- | ------- |");
                foreach (Column column in table.Columns.OrderBy(c => c.ColumnId))
                {
                    builder.Append("| " + table.TableName + " | ");
                    builder.Append(column.ColumnName + " | ");
                    builder.Append(column.ColumnType + " | ");
                    builder.Append(column.ColumnLength + " | ");
                    builder.AppendLine(column.ColumnPrecision + " |");
                }
                // Show Table Graph
                if (makeGraph)
                {
                    builder.AppendLine("\n## Schema\n");
                    builder.AppendLine("![" + table.Name + "]([" + table.ImageFile + "](" + table.ImageFile + "))");
                }

                // Reference
                builder.AppendLine("\n## References\n\n### Table\n");

                builder.AppendLine("| Fk Name | Schema Name | Column | Referenced Table | Referenced Column |");
                builder.AppendLine("| ------- | ----------- | ------ | ---------------- | ----------------- |");
                foreach (Reference reference in table.References)
                {
                    builder.Append("| " + reference.FK_Name + " | ");
                    builder.Append(reference.Schema_Name + " | ");
                    builder.Append(reference.ColumnName + " | ");
                    builder.Append("[" + reference.Referenced_TableName + @"](..\" + reference.Referenced_TableName + @"\" + reference.Referenced_Table.MdFile + ") | ");
                    builder.AppendLine(reference.Referenced_ColumnName + " | ");
                }

                // Show Reference Graph
                if (makeGraph)
                {
                    builder.AppendLine("\n### Schema\n");
                    builder.AppendLine("![" + table.Name + "]([" + table.ImageReferenceFile + "](" + table.ImageReferenceFile + "))");
                }

                // Reference By
                builder.AppendLine("\n## References By\n\n### Table\n");

                builder.AppendLine("| Schema | Table | Column | Referenced By | Referenced Name | Referenced by Column |");
                builder.AppendLine("| ------ | ----- | ------ | ------------- | --------------- | -------------------- |");
                foreach (ReferenceBy referenceBy in table.ReferenceBies)
                {
                    builder.Append("| " + referenceBy.Schema_Name + " | ");
                    builder.Append(referenceBy.TableName + " | ");
                    builder.Append(referenceBy.ColumnName + " | ");
                    builder.Append("[" + referenceBy.Referenced_By_Table.Name + @"](..\" + referenceBy.Referenced_By_TableName + @"\" + referenceBy.Referenced_By_Table.MdFile + ") | ");
                    builder.Append(referenceBy.Referenced_By_FK_Name + " | ");
                    builder.AppendLine(referenceBy.Referenced_By_ColumnName + " | ");
                }

                // Show Reference by Graph
                if (makeGraph)
                {
                    builder.AppendLine("\n### Schema\n");
                    builder.AppendLine("![" + table.Name + "]([" + table.ImageReferenceByFile + "](" + table.ImageReferenceByFile + "))");
                }

                builder.WriteFile(Path.Combine(folderPath, TableAutoGeneratedFolderName, table.TableName, AutoGeneratedStartFileName + table.MdFile));

                App.Current.Dispatcher.Invoke(() => NbOperation++);
            }
        }

        private string generateTableDiagrams(ICollection<Table> tables, string folderPath)
        {
            StringBuilder global = new StringBuilder();
            global.AppendLine(PlantUmlStart);
            global.AppendLine(PlantUmlBaseStyle);
            global.AppendLine(PlantUmlOrthoParameter);

            var factory = new RendererFactory();
            IPlantUmlRenderer renderer = null;
            byte[] svgBytes = null;
            List<string> references = new List<string>();
            foreach (Table table in tables)
            {
                //Render table
                App.Current.Dispatcher.Invoke(() => SubOperation = String.Format("Generating {0} table schema", table.Name));
                CreateDirectory(Path.Combine(folderPath, "Table", table.TableName));
                var diagram = simpleDiagram(table);
                table.TableUml = diagram;
                global.AppendLine(diagram);
            }
            foreach (Table tableGenerated in tables)
            {
                //Render table with reference
                App.Current.Dispatcher.Invoke(() => SubOperation = String.Format("Generating {0} Reference table schema", tableGenerated.Name));
                references.Clear();
                foreach (Reference reference in tableGenerated.References.Where(r => r.Referenced_TableName != r.TableName))
                {
                    references.Add(String.Format("\"{0}\" {1} \"{2}\"", reference.TableName.Replace(' ', '_'), "|" + (reference.ColumnNullable ? "o" : "|") + ".." + (reference.Referenced_ColumnNullable ? "o" : "|") + "{", reference.Referenced_TableName.Replace(' ', '_')));
                }
                references = references.Distinct().ToList();
                StringBuilder builder = new StringBuilder();
                references.ForEach(r => builder.AppendLine(r));
                string referencesString = builder.ToString();
                tableGenerated.ReferencesUml = referencesString;

                //Rendre table reference by
                App.Current.Dispatcher.Invoke(() => SubOperation = String.Format("Generating {0} Reference by table schema", tableGenerated.Name));
                references.Clear();
                foreach (ReferenceBy reference in tableGenerated.ReferenceBies.Where(r => r.Referenced_By_TableName != r.TableName))
                {
                    references.Add(String.Format("\"{0}\" {1} \"{2}\"", reference.TableName.Replace(' ', '_'), "}o.." + (reference.Referenced_By_ColumnNameNullable ? "o" : "|") + "|", reference.Referenced_By_TableName.Replace(' ', '_')));
                }
                references = references.Distinct().ToList();

                StringBuilder builderReferenceBy = new StringBuilder();
                references.ForEach(r => builderReferenceBy.AppendLine(r));
                tableGenerated.ReferenceBiesUml = builderReferenceBy.ToString();
            }

            App.Current.Dispatcher.Invoke(() => SubOperation = "Generating global table schema");

            //Global with references
            references = new List<string>();
            foreach (Table table in tables)
            {
                foreach (Reference reference in table.References)
                {
                    references.Add(String.Format("\"{0}\" {1} \"{2}\"", reference.TableName.Replace(' ', '_'), "|" + (reference.ColumnNullable ? "o" : "|") + ".." + (reference.Referenced_ColumnNullable ? "o" : "|") + "{", reference.Referenced_TableName.Replace(' ', '_')));
                }
            }
            references = references.Distinct().ToList();
            references.ForEach(r => global.AppendLine(r));
            global.AppendLine(PlantUmlEnd);

            App.Current.Dispatcher.Invoke(() => NbOperation++);
            return global.ToString();


        }

        public async Task RenderDiagram(ICollection<Table> tables, string folderPath, string global, CancellationToken? cancellationToken = null)
        {
            cancellationToken?.ThrowIfCancellationRequested();
            CreateDirectory(Path.Combine(folderPath, TableAutoGeneratedFolderName));
            var factory = new RendererFactory();

            CancellationTokenSource globalTokenSource = null;
            if (cancellationToken.HasValue)
                globalTokenSource = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken.Value);
            else
                globalTokenSource = new CancellationTokenSource();
            globalTokenSource.CancelAfter(PlantUmlMaxRenderingTimeMillisecond);
            CancellationToken globalCancellationToken = globalTokenSource.Token;

            Task globalTask = Task.Run(() =>
            {
                globalCancellationToken.ThrowIfCancellationRequested();
                IPlantUmlRenderer globalrenderer = factory.CreateRenderer(new PlantUmlSettings()
                {
                    RenderingMode = RenderingMode.Local,
                    LocalPlantUmlPath = PlantUmlPath,
                    LocalGraphvizDotPath = GraphvizDotPath,
                    JavaPath = JavaPath
                });
                byte[] svgBytes = globalrenderer.Render(global, OutputFormat.Svg, globalCancellationToken);
                File.WriteAllBytes(Path.Combine(folderPath, "full_database.svg"), svgBytes);
                App.Current.Dispatcher.Invoke(() => NbOperation++);
            }, globalCancellationToken);

            cancellationToken?.ThrowIfCancellationRequested();

            foreach (Table table in tables)
            {
                cancellationToken?.ThrowIfCancellationRequested();
                CreateDirectory(Path.Combine(folderPath, TableAutoGeneratedFolderName, table.TableName));
                CancellationTokenSource tableTokenSource = null;
                if (cancellationToken.HasValue)
                    tableTokenSource = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken.Value);
                else
                    tableTokenSource = new CancellationTokenSource();
                tableTokenSource.CancelAfter(PlantUmlMaxRenderingTimeMillisecond);
                CancellationToken tableCancellationToken = tableTokenSource.Token;
                Task tableTask = Task.Run(() =>
                {
                    cancellationToken?.ThrowIfCancellationRequested();
                    tableCancellationToken.ThrowIfCancellationRequested();
                    App.Current.Dispatcher.Invoke(() => SubOperation = String.Format("Rendering {0} Reference table schema", table.Name));
                    StringBuilder builder = new StringBuilder();
                    builder.AppendLine(PlantUmlStart);
                    builder.AppendLine(PlantUmlBaseStyle);
                    builder.AppendLine(table.TableUml);

                    builder.AppendLine(PlantUmlEnd);
                    tableCancellationToken.ThrowIfCancellationRequested();
                    IPlantUmlRenderer renderer = factory.CreateRenderer(new PlantUmlSettings()
                    {
                        RenderingMode = RenderingMode.Local,
                        LocalPlantUmlPath = PlantUmlPath,
                        LocalGraphvizDotPath = GraphvizDotPath,
                        JavaPath = JavaPath //Environment.GetEnvironmentVariable(JavaJdkInstallationFolderEnvironnementVariable)
                    });
                    tableCancellationToken.ThrowIfCancellationRequested();
                    byte[] svgBytes = renderer.Render(builder.ToString(), OutputFormat.Svg, cancellationToken: tableCancellationToken);
                    File.WriteAllBytes(Path.Combine(folderPath, TableAutoGeneratedFolderName, table.TableName, table.TableName.ToLower() + ".svg"), svgBytes);
                    App.Current.Dispatcher.Invoke(() => NbOperation++);
                }, tableCancellationToken);

                CancellationTokenSource referenceTokenSource = null;
                if (cancellationToken.HasValue)
                    referenceTokenSource = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken.Value);
                else
                    referenceTokenSource = new CancellationTokenSource();
                referenceTokenSource.CancelAfter(PlantUmlMaxRenderingTimeMillisecond);
                CancellationToken referenceCancellationToken = referenceTokenSource.Token;

                Task referenceTask = Task.Run(() =>
                {
                    cancellationToken?.ThrowIfCancellationRequested();
                    referenceCancellationToken.ThrowIfCancellationRequested();
                    App.Current.Dispatcher.Invoke(() => SubOperation = String.Format("Rendering {0} Reference table schema", table.Name));
                    StringBuilder builder = new StringBuilder();
                    builder.AppendLine(PlantUmlStart);
                    builder.AppendLine(PlantUmlOrthoParameter);
                    builder.AppendLine(PlantUmlBaseStyle);
                    builder.AppendLine(table.TableUml);
                    referenceCancellationToken.ThrowIfCancellationRequested();
                    foreach (String tableReference in table.References.DistinctBy(t => t.Referenced_TableName).Select(t => t.Referenced_Table.TableUml))
                    {
                        builder.AppendLine(tableReference);
                    }

                    builder.AppendLine(table.ReferencesUml);
                    builder.AppendLine(PlantUmlEnd);

                    referenceCancellationToken.ThrowIfCancellationRequested();
                    IPlantUmlRenderer renderer = factory.CreateRenderer(new PlantUmlSettings()
                    {
                        RenderingMode = RenderingMode.Local,
                        LocalPlantUmlPath = PlantUmlPath,
                        LocalGraphvizDotPath = GraphvizDotPath,
                        JavaPath = JavaPath //Environment.GetEnvironmentVariable(JavaJdkInstallationFolderEnvironnementVariable)
                    });
                    referenceCancellationToken.ThrowIfCancellationRequested();
                    byte[] svgBytes = renderer.Render(builder.ToString(), OutputFormat.Svg, referenceCancellationToken);
                    referenceCancellationToken.ThrowIfCancellationRequested();
                    File.WriteAllBytes(Path.Combine(folderPath, TableAutoGeneratedFolderName, table.TableName, table.TableName.ToLower() + "_link.svg"), svgBytes);
                    App.Current.Dispatcher.Invoke(() => NbOperation++);
                });

                CancellationTokenSource referenceByTokenSource = null;
                if (cancellationToken.HasValue)
                    referenceByTokenSource = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken.Value);
                else
                    referenceByTokenSource = new CancellationTokenSource();
                referenceByTokenSource.CancelAfter(PlantUmlMaxRenderingTimeMillisecond);
                CancellationToken referenceByCancellationToken = referenceByTokenSource.Token;
                Task referenceByTask = Task.Run(() =>
                {
                    cancellationToken?.ThrowIfCancellationRequested();
                    referenceByCancellationToken.ThrowIfCancellationRequested();
                    App.Current.Dispatcher.Invoke(() => SubOperation = String.Format("Rendering {0} Reference by table schema", table.Name));
                    StringBuilder builder = new StringBuilder();
                    builder.AppendLine(PlantUmlStart);
                    builder.AppendLine(PlantUmlOrthoParameter);
                    builder.AppendLine(PlantUmlBaseStyle);
                    builder.AppendLine(table.TableUml);
                    foreach (String tableReference in table.ReferenceBies.DistinctBy(t => t.Referenced_By_TableName).Select(t => t.Referenced_By_Table.TableUml))
                    {
                        builder.AppendLine(tableReference);
                    }
                    builder.AppendLine(table.ReferenceBiesUml);
                    builder.AppendLine(PlantUmlEnd);

                    referenceByCancellationToken.ThrowIfCancellationRequested();
                    IPlantUmlRenderer renderer = factory.CreateRenderer(new PlantUmlSettings()
                    {
                        RenderingMode = RenderingMode.Local,
                        LocalPlantUmlPath = PlantUmlPath,
                        LocalGraphvizDotPath = GraphvizDotPath,
                        JavaPath = JavaPath //Environment.GetEnvironmentVariable(JavaJdkInstallationFolderEnvironnementVariable)
                    });
                    byte[] svgBytes = renderer.Render(builder.ToString(), OutputFormat.Svg, referenceByCancellationToken);
                    referenceByCancellationToken.ThrowIfCancellationRequested();
                    File.WriteAllBytes(Path.Combine(folderPath, TableAutoGeneratedFolderName, table.TableName, table.TableName.ToLower() + "_linkby.svg"), svgBytes);
                    App.Current.Dispatcher.Invoke(() => NbOperation++);
                }, referenceByCancellationToken);
                await Task.WhenAll(tableTask, referenceTask, referenceByTask);
            }
        }

        private string simpleDiagram(Table table)
        {
            StringBuilder builder = new StringBuilder();


            builder.AppendLine(String.Format("entity \"{0}\" as {1}", table.TableName.Replace("_", " "), table.TableName.Replace(' ','_')) + "{");
            foreach (Column column in table.Columns.Where(c => c.IsPrimaryKey))
            {
                builder.AppendLine(String.Format("  {0} : {1}({2},{3}) {4} {5}", column.ColumnName, column.ColumnType, column.ColumnLength, column.ColumnPrecision, column.IsIdentity ? "<<generated>>" : "", column.IsNullable ? "null" : ""));
            }
            builder.AppendLine("  --");
            foreach (Column column in table.Columns.Where(c => !c.IsPrimaryKey))
            {
                builder.AppendLine(String.Format("  {0} : {1}({2},{3}) {4} {5}", column.ColumnName, column.ColumnType, column.ColumnLength, column.ColumnPrecision, column.IsIdentity ? "<<generated>>" : "", column.IsNullable ? "null" : ""));
            }
            builder.AppendLine("}");
            return builder.ToString();
        }

        public void CreateDirectory(string directoryPath)
        {
            int directoryCreationCount = 0;
            while (!Directory.Exists(directoryPath) && directoryCreationCount < MaxDirectoryCreationTry)
            {
                Directory.CreateDirectory(directoryPath);
                directoryCreationCount++;
            }
            if (!Directory.Exists(folderPath) && directoryCreationCount < 3)
            {
                throw new Exception(String.Format("Folder {0} could not be created, please check your rights access to this location.", directoryPath));
            }
        }
        #endregion

        #region MergeGeneratedDocumentation
        public void MergeGeneratedDocumentation(object o)
        {
            try
            {
                if (Directory.Exists(Path.Combine(folderPath, "docs", "Database", TableAutoGeneratedFolderName)) && Directory.Exists(Path.Combine(folderPath, "docs", "Database", CustomFolderName)))
                {
                    DirectoryInfo autoGeneratedDir = new DirectoryInfo(Path.Combine(folderPath, "docs", "Database", TableAutoGeneratedFolderName));
                    DirectoryInfo customDir = new DirectoryInfo(Path.Combine(folderPath, "docs", "Database", CustomFolderName));
                    FileInfo[] customFiles = customDir.GetFiles("*.md", SearchOption.TopDirectoryOnly);
                    foreach (DirectoryInfo directory in autoGeneratedDir.GetDirectories("*", SearchOption.TopDirectoryOnly).Where(d => d.Name != OlderFolderName))
                    {
                        FileInfo[] files = directory.GetFiles("*.md", SearchOption.TopDirectoryOnly);
                        if (customFiles.Any(f => f.Name.StartsWith(CustomStartFileName)) && files.Any(f => f.Name.StartsWith(AutoGeneratedStartFileName)))
                        {
                            using (FileStream stream = File.Create(files.Single(f => f.Name.StartsWith(AutoGeneratedStartFileName)).FullName.Replace(AutoGeneratedStartFileName, "")))
                            {
                                using (StreamWriter writer = new StreamWriter(stream))
                                {
                                    foreach (string line in File.ReadAllLines(Path.Combine(customDir.FullName, CustomStartFileName + files.Single(f => f.Name.StartsWith(AutoGeneratedStartFileName)).Name.Replace(AutoGeneratedStartFileName, ""))))
                                    {
                                        writer.WriteLine(line);
                                    }
                                    foreach (string line in File.ReadAllLines(files.Single(f => f.Name.StartsWith(AutoGeneratedStartFileName)).FullName))
                                    {
                                        writer.WriteLine(line);
                                    }
                                    //using (FileStream customstream = File.OpenRead(Path.Combine(customDir.FullName, CustomStartFileName + files.Single(f => f.Name.StartsWith(AutoGeneratedStartFileName)).Name.Replace(AutoGeneratedStartFileName, ""))))
                                    //{
                                    //    using (StreamReader customReader = new StreamReader(customstream))
                                    //    {
                                    //        writer.Write(customReader.Read());
                                    //    }
                                    //}
                                    //using (FileStream autoGeneratedstream = File.OpenRead(files.Single(f => f.Name.StartsWith(AutoGeneratedStartFileName)).FullName))
                                    //{
                                    //    using (StreamReader autoGeneratedReader = new StreamReader(autoGeneratedstream))
                                    //    {
                                    //        writer.Write(autoGeneratedReader.Read());
                                    //    }
                                    //}
                                    writer.Flush();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                MessageBox.Show(e.ToString());
            }
        }

        #endregion

        #region RegenerateYaml
        public void RegenerateYaml(object o)
        {
            if (File.Exists(Path.Combine(folderPath, "mkdocs.yml")))
            {
                File.Delete(Path.Combine(folderPath, "mkdocs.yml"));
            }
            CreateNewYaml(CultureInfo.CurrentCulture.TextInfo, Path.Combine(folderPath, "mkdocs.yml"));
        }
        #endregion

        #region StartStopServer
        public void StartStopServer(object o)
        {
            if (!IsServerStarting)
            {
                IsServerStarting = true;
                try
                {
                    if (!IsServerStart && MkDocsServerProcess != null && Process.GetProcessById(MkDocsServerProcess.Id) is Process runningProcess)
                    {
                        MessageBox.Show("A Server is currently running. Please Stop it before creating a new server.");
                        IsServerStart = false;
                    }
                    else
                    {
                        if (!IsServerStart)
                        {
                            string strCmdText;
                            strCmdText = "mkdocs serve";

                            MkDocsServerProcess = new System.Diagnostics.Process();
                            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
                            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Normal;
                            startInfo.FileName = "cmd.exe";
                            startInfo.Arguments = "/C mkdocs serve";
                            MkDocsServerProcess.StartInfo = startInfo;
                            if (MkDocsServerProcess.Start())
                            {

                            }
                            if (MkDocsServerProcess.ExitCode == 1)
                            {
                                IsServerStart = true;
                            }
                            else
                            {
                                IsServerStart = false;
                            }
                        }
                        else
                        {
                            MkDocsServerProcess.Kill(true);
                            IsServerStart = false;
                        }
                    }
                }
                catch (Exception e)
                {
                    IsServerStart = false;
                }
                IsServerStarting = false;
            }
        }
        #endregion

        private void FolderPathSearch(object o)
        {
            CommonOpenFileDialog dialog = new CommonOpenFileDialog();
            dialog.InitialDirectory = Properties.Settings.Default.FolderPath;
            dialog.IsFolderPicker = true;
            if (dialog.ShowDialog() == CommonFileDialogResult.Ok)
            {
                FolderPath = dialog.FileName;
            }
        }

        private void PlantUmlPathSearch(object o)
        {
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.InitialDirectory = Path.GetDirectoryName(Properties.Settings.Default.PlantUmlPath);
            dialog.CheckFileExists = true;
            dialog.CheckPathExists = true;
            dialog.DefaultExt = "jar";
            dialog.Filter = "Java archive (*.jar)|*.jar|All files (*.*)|*.*";
            if (dialog.ShowDialog() ?? false)
            {
                PlantUmlPath = dialog.FileName;
            }
        }

        private void GraphvizDotPathSearch(object o)
        {
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.InitialDirectory = Path.GetDirectoryName(Properties.Settings.Default.GraphvizDotPath);
            dialog.CheckFileExists = true;
            dialog.CheckPathExists = true;
            dialog.FileName = "dot.exe";
            dialog.DefaultExt = "exe";
            dialog.Filter = "Executable File (*.exe)|*.exe|All files (*.*)|*.*";
            if (dialog.ShowDialog() ?? false)
            {
                GraphvizDotPath = dialog.FileName;
            }
        }

        private void JavaPathSearch(object o)
        {
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.InitialDirectory = Properties.Settings.Default.JavaPath;
            dialog.CheckFileExists = true;
            dialog.CheckPathExists = true;
            dialog.FileName = "java.exe";
            dialog.DefaultExt = "exe";
            dialog.Filter = "Executable File (*.exe)|*.exe|All files (*.*)|*.*";
            if (dialog.ShowDialog() ?? false)
            {
                JavaPath = dialog.FileName;
            }
        }

        private void ChangeMainColor(object o)
        {
            //ThemeAssist assist = new MaterialDesignThemes.Wpf.ThemeAssist();

            //var theme = paletteHelper.GetTheme();
            //theme.P

            //SelectedColor
        }
    }
}
