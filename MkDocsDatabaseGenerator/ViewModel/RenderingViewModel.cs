using Azure;
using MkDocsDatabaseGenerator.Extension;
using MkDocsDatabaseGenerator.Model;
using MkDocsDatabaseGenerator.ViewModel.Interface;
using PlantUml.Net;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Controls;

namespace MkDocsDatabaseGenerator.ViewModel
{
    public class RenderingViewModel : IDisposable
    {
        private static StringBuilder BasePlantUmlBuilder(string content)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine(Constants.PlantUmlStart);
            builder.AppendLine(Constants.PlantUmlTheme);
            builder.AppendLine(Constants.PlantUmlOrthoParameter);
            builder.AppendLine(Constants.PlantUmlBaseStyle);
            builder.AppendLine(content);
            builder.AppendLine(Constants.PlantUmlEnd);
            return builder;
        }

        private static StringBuilder BasePlantUmlBuilder(Action<StringBuilder> contentContructor)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine(Constants.PlantUmlStart);
            builder.AppendLine(Constants.PlantUmlTheme);
            builder.AppendLine(Constants.PlantUmlOrthoParameter);
            builder.AppendLine(Constants.PlantUmlBaseStyle);
            contentContructor(builder);
            builder.AppendLine(Constants.PlantUmlEnd);
            return builder;
        }

        private IPlantUmlRenderer GetRenderer(RendererFactory factory)
        {
            return factory.CreateRenderer(new PlantUmlSettings()
            {
                RenderingMode = RenderingMode.Local,
                LocalPlantUmlPath = caller.PlantUmlPath,
                LocalGraphvizDotPath = caller.GraphvizDotPath,
                JavaPath = caller.JavaPath //Environment.GetEnvironmentVariable(JavaJdkInstallationFolderEnvironnementVariable)
            });
        }

        private string folderPath;
        private string docsFolderPath;
        private string docsDatabaseFolderPath;
        private IRenderingViewModelCaller caller;

        public RenderingViewModel(string folderPath, IRenderingViewModelCaller caller)
        {
            this.caller = caller;
            this.folderPath = folderPath;
            this.docsFolderPath = Path.Combine(folderPath, "docs");
            this.docsDatabaseFolderPath = Path.Combine(folderPath, "docs", "Database");
        }

        private const string TableAutoGeneratedFolderName = "Table";

        public void CreateDirectory(params string[] folder)
        {
            CreateDirectory(folder.ToList());
        }

        public void CreateDirectory(List<string> folder)
        {
            int directoryCreationCount = 0;
            if (folder[0] != folderPath)
                folder.Insert(0, folderPath);

            string directoryPath = Path.Combine(folder.ToArray());
            while (!Directory.Exists(directoryPath) && directoryCreationCount < Constants.MaxDirectoryCreationTry)
            {
                Directory.CreateDirectory(directoryPath);
                directoryCreationCount++;
            }
            if (!Directory.Exists(folderPath) && directoryCreationCount < 3)
            {
                throw new Exception(String.Format("Folder {0} could not be created, please check your rights access to this location.", directoryPath));
            }
        }

        public async Task RenderDiagram(ICollection<Table> tables, string folderPath, string global, CancellationToken cancellationToken)
        {
            CreateDirectory(TableAutoGeneratedFolderName);

            var factory = new RendererFactory();
            await RenderDiagramGlobal(factory, global: global, cancellationToken: cancellationToken);
            await RenderDiagramTables(factory: factory, tables: tables, cancellationToken: cancellationToken);
        }

        private async Task RenderDiagramGlobal(RendererFactory factory, string global, CancellationToken cancellationToken)
        {
            IPlantUmlRenderer globalrenderer = factory.CreateRenderer(new PlantUmlSettings()
            {
                RenderingMode = RenderingMode.Local,
                LocalPlantUmlPath = caller.PlantUmlPath,
                LocalGraphvizDotPath = caller.GraphvizDotPath,
                JavaPath = caller.JavaPath
            });
            byte[] svgBytes = await globalrenderer.RenderAsync(global, OutputFormat.Svg, cancellationToken: cancellationToken);
            File.WriteAllBytes(Path.Combine(docsDatabaseFolderPath, "full_database.svg"), svgBytes);
            caller.NbOperation++;
        }

        private async Task RenderDiagramTables(RendererFactory factory, ICollection<Table> tables, CancellationToken cancellationToken)
        {
            await tables.ForEachAsync(async table =>
            {
                CreateDirectory(Path.Combine(docsDatabaseFolderPath, TableAutoGeneratedFolderName, table.TableName));
                caller.SubOperation = String.Format("Rendering {0} Reference table schema", table.Name);
                await RenderDiagramTable(factory: factory, table: table, cancellationToken: cancellationToken);
                await RenderDiagramReference(factory: factory, table: table, cancellationToken: cancellationToken);
                await RenderDiagramReferenceBy(factory: factory, table: table, cancellationToken: cancellationToken);
            });
        }

        private async Task RenderDiagramTable(RendererFactory factory, Table table, CancellationToken cancellationToken)
        {
            byte[] svgBytes = await GetRenderer(factory: factory)
                .RenderAsync(BasePlantUmlBuilder(table.TableUml).ToString(), OutputFormat.Svg, cancellationToken: cancellationToken);
            string path = Path.Combine(docsDatabaseFolderPath, TableAutoGeneratedFolderName, table.TableName, table.TableName.ToLower() + ".svg");
            await File.WriteAllBytesAsync(path, svgBytes, cancellationToken: cancellationToken);
            caller.NbOperation++;
        }

        private async Task RenderDiagramReference(RendererFactory factory, Table table, CancellationToken cancellationToken)
        {
            caller.SubOperation = String.Format("Rendering {0} Reference table schema", table.Name);
            StringBuilder builder = BasePlantUmlBuilder(build =>
            {
                build.AppendLine(table.TableUml);
                foreach (String tableReference in table.References.DistinctBy(t => t.Referenced_TableName).Select(t => t.Referenced_Table.TableUml))
                {
                    build.AppendLine(tableReference);
                }
                build.AppendLine(table.ReferencesUml);
            });

            byte[] svgBytes = await GetRenderer(factory: factory)
                .RenderAsync(builder.ToString(), OutputFormat.Svg, cancellationToken: cancellationToken);
            await File.WriteAllBytesAsync(Path.Combine(docsDatabaseFolderPath, TableAutoGeneratedFolderName, table.TableName, table.TableName.ToLower() + "_link.svg"), svgBytes, cancellationToken: cancellationToken);
            caller.NbOperation++;
        }

        private async Task RenderDiagramReferenceBy(RendererFactory factory, Table table, CancellationToken cancellationToken)
        {
            caller.SubOperation = String.Format("Rendering {0} Reference by table schema", table.Name);
            StringBuilder builder = BasePlantUmlBuilder(build =>
            {
                build.AppendLine(table.TableUml);
                foreach (String tableReference in table.ReferenceBies.DistinctBy(t => t.Referenced_By_TableName).Select(t => t.Referenced_By_Table.TableUml))
                {
                    build.AppendLine(tableReference);
                }
                build.AppendLine(table.ReferenceBiesUml);
            });

            IPlantUmlRenderer renderer = GetRenderer(factory: factory);

            byte[] svgBytes = await GetRenderer(factory: factory)
                .RenderAsync(builder.ToString(), OutputFormat.Svg, cancellationToken: cancellationToken);
            await File.WriteAllBytesAsync(Path.Combine(docsDatabaseFolderPath, TableAutoGeneratedFolderName, table.TableName, table.TableName.ToLower() + "_linkby.svg"), svgBytes, cancellationToken: cancellationToken);
            caller.NbOperation++;
        }

        public void Dispose()
        {
        }
    }
}